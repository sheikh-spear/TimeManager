"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUrlByRequestOptions = exports.DEFAULT_PATH = void 0;
var http_1 = require("http");
var https_1 = require("https");
var debug = require('debug')('utils getUrlByRequestOptions');
exports.DEFAULT_PATH = '/';
var DEFAULT_PROTOCOL = 'http:';
var DEFAULT_PORT = 80;
/**
 * Creates a `URL` instance from a given `RequestOptions` object.
 */
function getUrlByRequestOptions(options) {
    var _a, _b;
    var path = options.path || exports.DEFAULT_PATH;
    var agentOptions = options.agent instanceof http_1.Agent ? options.agent : null;
    debug('creating URL from options:', options);
    // Inherit the protocol from the Agent, if present.
    if (agentOptions) {
        debug('inherited protocol "%s" from Agent', agentOptions === null || agentOptions === void 0 ? void 0 : agentOptions.protocol, agentOptions);
        options.protocol = agentOptions === null || agentOptions === void 0 ? void 0 : agentOptions.protocol;
    }
    if (!options.protocol) {
        debug('given no protocol, resolving...');
        // Assume HTTPS if cert is set.
        options.protocol = options.cert
            ? 'https:'
            : ((_a = options.uri) === null || _a === void 0 ? void 0 : _a.protocol) || DEFAULT_PROTOCOL;
        debug('resolved protocol to:', options.protocol);
    }
    var baseUrl = options.protocol + "//" + (options.hostname || options.host);
    debug('using base URL:', baseUrl);
    var url = options.uri ? new URL(options.uri.href) : new URL(path, baseUrl);
    if (!!options.port || (agentOptions === null || agentOptions === void 0 ? void 0 : agentOptions.defaultPort) || ((_b = agentOptions) === null || _b === void 0 ? void 0 : _b.options.port)) {
        var agentPort = agentOptions instanceof https_1.Agent
            ? agentOptions.options.port
            : agentOptions === null || agentOptions === void 0 ? void 0 : agentOptions.defaultPort;
        var urlPort = options.port || agentPort || DEFAULT_PORT;
        debug('resolved port', urlPort);
        url.port = urlPort.toString();
    }
    if (!!options.auth) {
        var _c = options.auth.split(':'), username = _c[0], password = _c[1];
        url.username = username;
        url.password = password;
        debug('resolved auth', { username: username, password: password });
    }
    debug('created URL:', url);
    return url;
}
exports.getUrlByRequestOptions = getUrlByRequestOptions;
//# sourceMappingURL=getUrlByRequestOptions.js.map